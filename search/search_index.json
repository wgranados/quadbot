{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Functionality This is an modular multiplatform chat bot written in Python 3, supporting hot reloading, and a variety of commands. Platforms [x] PokemonShowdown [x] Discord Documention Check out this site for documentation!","title":"Home"},{"location":"#functionality","text":"This is an modular multiplatform chat bot written in Python 3, supporting hot reloading, and a variety of commands.","title":"Functionality"},{"location":"#platforms","text":"[x] PokemonShowdown [x] Discord","title":"Platforms"},{"location":"#documention","text":"Check out this site for documentation!","title":"Documention"},{"location":"broadcast/","text":"Description This command sets minimum broadcast rank for a room, bot owners are exempt from this rule. This is intended only for use by room owners or bot owners. if left empty, simply returns the broadcast rank for the room this was executed in. Usage: broadcast [rank] rank: optional string, desired broadcast rank for this room; any of 'off', '+', '%', '@', '*', '#'.","title":"Broadcast"},{"location":"broadcast/#description","text":"This command sets minimum broadcast rank for a room, bot owners are exempt from this rule. This is intended only for use by room owners or bot owners. if left empty, simply returns the broadcast rank for the room this was executed in.","title":"Description"},{"location":"broadcast/#usage-broadcast-91rank93","text":"rank: optional string, desired broadcast rank for this room; any of 'off', '+', '%', '@', '*', '#'.","title":"Usage: broadcast [rank]"},{"location":"contributing/","text":"Help Currently this project will be closed source until further notice. You are free to make suggestions or documention improvements, and I will see if I can get to them in time. In the mean time stay tuned! Contributors William Granados me@wgma.ca","title":"Contributing"},{"location":"contributing/#help","text":"Currently this project will be closed source until further notice. You are free to make suggestions or documention improvements, and I will see if I can get to them in time. In the mean time stay tuned!","title":"Help"},{"location":"contributing/#contributors","text":"William Granados me@wgma.ca","title":"Contributors"},{"location":"search/","text":"Description This command uses a reverse proxy to search your commands amongst multiple search engines, it then retrieves the top result in the form of a url and some content related to your query. Usage: search [query] [engine] query: string, anything you want engine: string, one of the supported engines Engines Steam Google Arxiv Twitter Bing","title":"Search"},{"location":"search/#description","text":"This command uses a reverse proxy to search your commands amongst multiple search engines, it then retrieves the top result in the form of a url and some content related to your query.","title":"Description"},{"location":"search/#usage-search-91query93-91engine93","text":"query: string, anything you want engine: string, one of the supported engines","title":"Usage: search [query]  [engine]"},{"location":"search/#engines","text":"Steam Google Arxiv Twitter Bing","title":"Engines"},{"location":"setup/","text":"Setup If you're fortunate enough to have found this website, then you're one of the select few who may be intersted in running it and seeing it in action! (I hope). Thankfully if you have docker installed and follow some simple steps, you too can now run a quadbot! Dependencies Docker This project wraps core components in docker and makes use of other useful components as microservces. Python Python 3.5+. No plans are made to make this support earlier versions. We make use of async PIP . Package manager for python Guide Follow the instructions in details-example.yaml to configure your bot for login Build searx using docker-compose build searx Run using docker-compose up -d searx quadbot_ps Documentation Several things are documented on this website , you can update this documention by installing the pydocmd depedency in requirements.txt and updating the respective yaml file. Then you can finally use pydocmd serve to see your changes.","title":"Setup"},{"location":"setup/#setup","text":"If you're fortunate enough to have found this website, then you're one of the select few who may be intersted in running it and seeing it in action! (I hope). Thankfully if you have docker installed and follow some simple steps, you too can now run a quadbot!","title":"Setup"},{"location":"setup/#dependencies","text":"","title":"Dependencies"},{"location":"setup/#docker","text":"This project wraps core components in docker and makes use of other useful components as microservces.","title":"Docker"},{"location":"setup/#python","text":"Python 3.5+. No plans are made to make this support earlier versions. We make use of async PIP . Package manager for python","title":"Python"},{"location":"setup/#guide","text":"Follow the instructions in details-example.yaml to configure your bot for login Build searx using docker-compose build searx Run using docker-compose up -d searx quadbot_ps","title":"Guide"},{"location":"setup/#documentation","text":"Several things are documented on this website , you can update this documention by installing the pydocmd depedency in requirements.txt and updating the respective yaml file. Then you can finally use pydocmd serve to see your changes.","title":"Documentation"},{"location":"showdown/","text":"Client Client(self, config=None, url=None, log_errors=False) Represents a client connection that connects to PokemonShowdown. This class handles the major client-side connection to the PokemonShowdown server. It also provides an API wrapper for the basic PS commands and protocols PS abides by. You should expect to be somewhat familiar with the PS protocols outlined below: https://github.com/Zarel/Pokemon-Showdown/blob/master/PROTOCOL.md if you want to make edits to the following piece of code. For the sake of simplicity, we assume that the command char used is ~ in the documentation. Attributes: ws: websockets connection, asyncio compliant websocket client. rooms: map of Room, map containing all of the rooms this bot is in. config: dict, contains all relevant config details for the bot. session: session, coroutine session required for aiohttp connections. log_errors: bool, whether or not to log exceptions.","title":"showdown"},{"location":"steam/","text":"Description This command queries SteamCommunity for the cloest game in Steam's library that matches your search. If this bot has * rank then it has the option to create an html box in chat for users with broadcast rank. Usage: steam [query] [showimage] query: string, name of the game you want details on. showimage: string, optional string. include showimage in command to make html box in chat","title":"Steam"},{"location":"steam/#description","text":"This command queries SteamCommunity for the cloest game in Steam's library that matches your search. If this bot has * rank then it has the option to create an html box in chat for users with broadcast rank.","title":"Description"},{"location":"steam/#usage-steam-91query93-91showimage93","text":"query: string, name of the game you want details on. showimage: string, optional string. include showimage in command to make html box in chat","title":"Usage: steam [query]  [showimage]"},{"location":"testing/","text":"Testing Important notes for testing, since this software makes use of microservices you will likely have to intiate these before running some tests. Likewise a large portion of this is written with asyncio so we've used an asyncio extension of pytest to do our tests. Testing Search docker-compose build searx && docker-compose up -d && python3 -m pytest test Note that there might be some slight differences in testing locally and how the software runs in production. An example can be found here Testing in General python3 -m pytest test","title":"testing"},{"location":"testing/#testing","text":"Important notes for testing, since this software makes use of microservices you will likely have to intiate these before running some tests. Likewise a large portion of this is written with asyncio so we've used an asyncio extension of pytest to do our tests.","title":"Testing"},{"location":"testing/#testing-search","text":"docker-compose build searx && docker-compose up -d && python3 -m pytest test Note that there might be some slight differences in testing locally and how the software runs in production. An example can be found here","title":"Testing Search"},{"location":"testing/#testing-in-general","text":"python3 -m pytest test","title":"Testing in General"},{"location":"plugins/CommandBase/","text":"CommandBase CommandBase(self, aliases, can_learn) Wrapper class for all commands written in this Bot. Defines main behaviour each command should have and also keeps track of duplicate commands. Attributes: aliases: list of str, keeps track of all the aliases that evoke this command can_learn: Bool, specifying if chat data should be sent to this bot.","title":"commands"}]}